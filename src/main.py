import asyncio
import json
import logging
import os
import tempfile

import httpx
from aiogram import Router, F
from aiogram.filters import StateFilter, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, Document, FSInputFile

from core.dependecies import bot, dp, clean_text
from src.handlers.start_handler import db, user_photo_cache, analysis_cache, user_states
from src.servicies.parser import parse_twinby_chat, parse_telegram_html_chat
from src.servicies.photo_analyzer import analyze_single_photo, compare_two_photos

main_router = Router()
PHOTO_DIR = "imgs"
API = "https://9a47d9ea5108.ngrok-free.app/analyze"

class WaitForTwoPhotos(Filter):
    async def __call__(self, message: Message) -> bool:
        return user_states.get(message.from_user.id) == "waiting_for_two_photos"

@main_router.callback_query(F.data == "recommending")
async def recommends(callback_query: CallbackQuery):
    user_id = callback_query.message.chat.id
    profile = db.get_user_profile_by_user_id(user_id)

    try:
        file = await bot.get_file(profile.img_id)
        path = f"imgs/{profile.img_id}.jpg" if profile.img_id else None

        if not os.path.exists(path):
            await bot.download_file(file.file_path, f"imgs/{profile.img_id}.jpg")

        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(
            None, analyze_single_photo, path
        )

        async with httpx.AsyncClient(timeout=100) as client:
            response = await client.post(
                API,
                json={"text": profile.about, "task_type": "profile"},
                headers={
                    "Content-Type": "application/json",
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ngrok
                    "ngrok-skip-browser-warning": "true"
                }
            )
            response.raise_for_status()
            analyse_res_text = response.json()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        if "error" in result:
            await callback_query.message.answer(result["error"])
        else:
            text = "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
            text += "üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in result["recommendations"]:
                text += f"{rec}\n"
            await callback_query.message.answer(f"{text}\n\n{analyse_res_text}", parse_mode="Markdown")

        if os.path.exists(path):
            os.remove(path)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await callback_query.message.answer(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@main_router.callback_query(F.data == "screen_history")
async def screen_history_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:")
    await state.set_state("waiting_for_screen")

@main_router.message(F.photo, StateFilter("waiting_for_screen"))
async def screen_history_analyse(message: Message, state: FSMContext):
    text = ''
    photo = message.photo[-1]
    file_id = photo.file_id
    photo_path = os.path.join(PHOTO_DIR, f"{file_id}.jpg")
    await message.answer("‚öôÔ∏è –°–æ—Ö—Ä–∞–Ω—è—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä–∏–Ω—à–æ—Ç —á–∞—Ç–∞...")
    try:
        file = await bot.get_file(file_id)
        await bot.download(file, destination=photo_path)
        loop = asyncio.get_event_loop()
        messages = await loop.run_in_executor(
            None, parse_twinby_chat, photo_path
        )

        for msg in messages:
            text += f"<b>{msg['role']}:</b> {msg['text']}\n"

        async with httpx.AsyncClient(timeout=100) as client:
            response = await client.post(
                API,
                json={"text": text, "task_type": "dialog"},
                headers={
                    "Content-Type": "application/json",
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ngrok
                    "ngrok-skip-browser-warning": "true"
                }
            )
            response.raise_for_status()
            analyse_res_text = response.json()['response']
            res = clean_text(analyse_res_text)

            await message.answer(res, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞.")
    finally:
        if os.path.exists(photo_path):
            os.remove(photo_path)

@main_router.callback_query(F.data == "html_history")
async def screen_history_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ html –¥–æ–∫—É–º–µ–Ω—Ç:")
    await state.set_state("waiting_for_html")

@main_router.message(F.document, StateFilter("waiting_for_html"))
async def html_chat_handler(message: Message):
    user_id = message.from_user.id
    document: Document = message.document
    file_name = document.file_name
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ html
    if not (file_name and file_name.lower().endswith(".html")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª messages.html.")
        return
    file_path = os.path.join(PHOTO_DIR, f"{user_id}_{file_name}")
    await message.answer("‚öôÔ∏è –°–æ—Ö—Ä–∞–Ω—è—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é HTML —á–∞—Ç...")
    try:
        file = await bot.get_file(document.file_id)
        await bot.download(file, destination=file_path)
        loop = asyncio.get_event_loop()
        messages = await loop.run_in_executor(
            None, parse_telegram_html_chat, file_path
        )
        user_states[user_id] = None
        # -- PREVIEW —Ç–µ–∫—Å—Ç–æ–º --
        preview_lines = "\n".join(
            [f"<b>{m['role']}:</b> {m['text']}" for m in messages]
        )

        async with httpx.AsyncClient(timeout=300) as client:
            response = await client.post(
                API,
                json={"text": preview_lines, "task_type": "dialog"},
                headers={
                    "Content-Type": "application/json",
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ngrok
                    "ngrok-skip-browser-warning": "true"
                }
            )
            response.raise_for_status()
            analyse_res_text = response.json()['response']
            res = clean_text(analyse_res_text)

            await message.answer(res, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ html-—á–∞—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

logging.basicConfig(
    level=logging.INFO,
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


async def main():
    dp.include_router(main_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(e)
