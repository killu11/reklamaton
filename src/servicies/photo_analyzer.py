import cv2
import numpy as np
from deepface import DeepFace
from PIL import Image
import imagehash
# –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

# –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–≤–∏—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ, –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"

def analyze_single_photo(image_path):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    :param image_path: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    :return: dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    import cv2
    import numpy as np
    from deepface import DeepFace

    # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü–∞
    try:
        face_objs = DeepFace.extract_faces(img_path=image_path, detector_backend="retinaface")
        if len(face_objs) == 0:
            return {"error": "‚ùå –ù–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º."}
        if len(face_objs) > 1:
            return {"error": "‚ùå –ù–∞ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ª–∏—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º."}
    except Exception as e:
        print(e)
        return {"error": "‚ùå –ù–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º."}

    result = {
        "has_face": True,
        "recommendations": []
    }

    # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–∏ (–≤–∞–∂–Ω–æ: —Ä–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–æ–º –ª–∏—Ü–∞)
    try:
        emotion_results = DeepFace.analyze(img_path=image_path, actions=['emotion'])
        emotion_result = emotion_results[0]  # <-- —Ç—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        dominant_emotion = emotion_result["dominant_emotion"]
        result["emotion"] = dominant_emotion

        if dominant_emotion == "happy":
            result["recommendations"].append("üòÑ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –£–ª—ã–±–∫–∞ –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—â–∏–º –∫ –æ–±—â–µ–Ω–∏—é.")
        elif dominant_emotion == "neutral":
            result["recommendations"].append("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π ‚Äî —Ç–∞–∫ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è.")
        elif dominant_emotion == "sad":
            result["recommendations"].append("üò¢ –≠–º–æ—Ü–∏—è –≥—Ä—É—Å—Ç–∏ –º–æ–∂–µ—Ç –æ—Ç–ø—É–≥–Ω—É—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∏—Ü–∞.")
        elif dominant_emotion == "angry":
            result["recommendations"].append("üò† –í—ã—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–ª–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏. –ü–æ–¥–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –ª–∏—Ü–æ–º.")
        elif dominant_emotion == "fear":
            result["recommendations"].append("üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ–µ –∏–ª–∏ –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –õ—É—á—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Å —É–≤–µ—Ä–µ–Ω–Ω—ã–º –∏ —Å–ø–æ–∫–æ–π–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º.")
        elif dominant_emotion == "disgust":
            result["recommendations"].append("üòñ –í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ–π—Ç–∏–Ω–≥-–ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–º –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∏—Ü–∞.")
        elif dominant_emotion == "surprise":
            result["recommendations"].append("üò≤ –£–¥–∏–≤–ª–µ–Ω–∏–µ ‚Äî –Ω–µ —Å–∞–º–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è —ç–º–æ—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è. –û–Ω–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")
        else:
            result["recommendations"].append("üôÇ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –¥–µ–π—Ç–∏–Ω–≥-–ø—Ä–æ—Ñ–∏–ª—è.")
    except Exception as e:
        print(e)
        return {'error': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–Ω–æ–≤–∞.'}

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–æ—Å—Ç–∏ –∏ –æ—Å–≤–µ—â–µ–Ω–∏—è
    try:
        image = cv2.imread(image_path)
        if image is None:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.'}
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        sharpness = cv2.Laplacian(gray, cv2.CV_64F).var()
        brightness = np.mean(gray)
        sharpness_ok = sharpness > 100
        brightness_ok = 40 < brightness < 220
        result["sharpness_ok"] = sharpness_ok
        result["brightness_ok"] = brightness_ok

        if not sharpness_ok:
            result["recommendations"].append("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –≤ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.")
        else:
            result["recommendations"].append("üì∑ –†–µ–∑–∫–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        if not brightness_ok:
            if brightness < 40:
                result["recommendations"].append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Ç—ë–º–Ω–æ–µ —Ñ–æ—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.")
            else:
                result["recommendations"].append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —è—Ä–∫–æ–µ —Ñ–æ—Ç–æ. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö –±–ª–∏–∫–æ–≤.")
        else:
            result["recommendations"].append("üí° –û—Å–≤–µ—â–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –≤—ã–¥–µ—Ä–∂–∞–Ω–æ –ø–æ —è—Ä–∫–æ—Å—Ç–∏.")
    except Exception as e:
        print(e)
        return {'error': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–Ω–æ–≤–∞.'}

    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
    try:
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV).astype("float32")
        saturation = cv2.mean(hsv[:, :, 1])[0]
        saturation_ok = saturation > 40
        result["saturation_ok"] = saturation_ok
        if saturation_ok:
            result["recommendations"].append("üåà –§–æ—Ç–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ, —Ü–≤–µ—Ç–∞ —è—Ä–∫–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ!")
    except Exception as e:
        print(e)
        return {'error': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–Ω–æ–≤–∞.'}

    return result

def get_image_hash(image_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç perceptual hash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return str(imagehash.phash(Image.open(image_path)))

def compare_two_photos(photo1_path, photo2_path, analysis_cache):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∫–∞–∫–æ–µ –ª—É—á—à–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.

    :param photo1_path: –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
    :param photo2_path: –ø—É—Ç—å –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ñ–æ—Ç–æ
    :param analysis_cache: —Å–ª–æ–≤–∞—Ä—å {image_hash: analysis_result}
    :return: dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à–∏ —Ñ–æ—Ç–æ
    hash1 = get_image_hash(photo1_path)
    hash2 = get_image_hash(photo2_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    if hash1 in analysis_cache:
        analysis1 = analysis_cache[hash1]
    else:
        analysis1 = analyze_single_photo(photo1_path)
        analysis_cache[hash1] = analysis1

    if hash2 in analysis_cache:
        analysis2 = analysis_cache[hash2]
    else:
        analysis2 = analyze_single_photo(photo2_path)
        analysis_cache[hash2] = analysis2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if "error" in analysis1:
        return {"error": f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ: {analysis1['error']}"}
    if "error" in analysis2:
        return {"error": f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Ñ–æ—Ç–æ: {analysis2['error']}"}

    # –°—á—ë—Ç—á–∏–∫–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
    score1 = 0
    score2 = 0

    reasons = []

    # --- 1. –≠–º–æ—Ü–∏—è ---
    good_emotions = ["happy", "neutral", "surprise"]
    bad_emotions = ["sad", "angry", "fear", "disgust"]

    emotion1 = analysis1.get("emotion")
    emotion2 = analysis2.get("emotion")

    if emotion1 in good_emotions and emotion2 in bad_emotions:
        score1 += 1
        reasons.append("üòÑ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ª—É—á—à–µ–π —ç–º–æ—Ü–∏–µ–π.")
    elif emotion2 in good_emotions and emotion1 in bad_emotions:
        score2 += 1
        reasons.append("üòÑ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ —Å –ª—É—á—à–µ–π —ç–º–æ—Ü–∏–µ–π.")
    elif emotion1 in good_emotions and emotion2 in good_emotions:
        reasons.append("üòÑ –û–±–∞ —Ñ–æ—Ç–æ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–º–æ—Ü–∏–µ–π.")
    elif emotion1 in bad_emotions and emotion2 in bad_emotions:
        reasons.append("üò≠ –û–±–∞ —Ñ–æ—Ç–æ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π —ç–º–æ—Ü–∏–µ–π.")

    # --- 2. –†–µ–∑–∫–æ—Å—Ç—å ---
    sharpness1 = analysis1.get("sharpness_ok", False)
    sharpness2 = analysis2.get("sharpness_ok", False)

    if sharpness1 and not sharpness2:
        score1 += 1
        reasons.append("üì∑ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —Ä–µ–∑–∫–æ–µ.")
    elif not sharpness1 and sharpness2:
        score2 += 1
        reasons.append("üì∑ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —Ä–µ–∑–∫–æ–µ.")
    elif sharpness1 and sharpness2:
        reasons.append("üì∑ –û–±–∞ —Ñ–æ—Ç–æ —Ä–µ–∑–∫–∏–µ.")

    # --- 3. –û—Å–≤–µ—â–µ–Ω–∏–µ ---
    brightness1 = analysis1.get("brightness_ok", False)
    brightness2 = analysis2.get("brightness_ok", False)

    if brightness1 and not brightness2:
        score1 += 1
        reasons.append("üí° –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º.")
    elif not brightness1 and brightness2:
        score2 += 1
        reasons.append("üí° –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º.")
    elif brightness1 and brightness2:
        reasons.append("üí° –û–±–∞ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º.")

    # --- 4. –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ ---
    saturation1 = analysis1.get("saturation_ok", False)
    saturation2 = analysis2.get("saturation_ok", False)

    if saturation1 and not saturation2:
        score1 += 1
        reasons.append("üåà –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ.")
    elif not saturation1 and saturation2:
        score2 += 1
        reasons.append("üåà –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ.")
    elif saturation1 and saturation2:
        reasons.append("üåà –û–±–∞ —Ñ–æ—Ç–æ —è—Ä–∫–∏–µ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ.")

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ---
    winner = None
    if score1 > score2:
        winner = "–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ª—É—á—à–µ"
    elif score2 > score1:
        winner = "–í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –ª—É—á—à–µ"
    else:
        winner = "–û–±–∞ —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"

    return {
        "winner": winner,
        "reasons": reasons,
        "score1": score1,
        "score2": score2,
        "is_same_photo": hash1 == hash2
    }